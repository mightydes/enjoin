<?php
use Enjoin\Enjoin;
trait CompareTrait
{
    private function params_testCountConditional(){return ['where'=>['id'=>['lt'=>5],'title'=>['like'=>'My%']]];}
    private function sql_testCountConditional(){return "SELECT count(*) AS `count` FROM `books` AS `books` WHERE `books`.`id` < 5 AND `books`.`title` LIKE 'My%'";}
    private function params_testCountEagerOneThenMany(){return ['include'=>['model'=>Enjoin::get('Authors'),'include'=>Enjoin::get('Articles')]];}
    private function sql_testCountEagerOneThenMany(){return "SELECT count(`books`.`id`) AS `count` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` LEFT OUTER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id`";}
    private function params_testCountEagerOneThenManyMean(){return ['where'=>['id'=>['lt'=>5]],'include'=>['model'=>Enjoin::get('Authors'),'where'=>['id'=>['like'=>'2%']],'include'=>['model'=>Enjoin::get('Articles'),'where'=>['year'=>['like'=>'19%']]]]];}
    private function sql_testCountEagerOneThenManyMean(){return "SELECT count(`books`.`id`) AS `count` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` AND `author`.`id` LIKE '2%' INNER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id` AND `author.articles`.`year` LIKE '19%' WHERE `books`.`id` < 5";}
    private function params_testCountEagerRequired(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'required'=>true]]]];}
    private function sql_testCountEagerRequired(){return "SELECT count(`authors`.`id`) AS `count` FROM `authors` AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice')";}
    private function params_testCountEagerRequiredLimited(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'required'=>true]]],'limit'=>25,'offset'=>7];}
    private function sql_testCountEagerRequiredLimited(){return "SELECT count(`authors`.`id`) AS `count` FROM `authors` AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice')";}
    private function params_testFindAllEagerNestedDeep(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'where'=>['title'=>['notLike'=>'sad'],'or'=>[['year'=>['lt'=>1920]],['year'=>['gt'=>1930]]]],'attributes'=>['year','title'],'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'where'=>['or'=>[['and'=>[['mistakes'=>['ne'=>'']],['pressrun'=>['gte'=>5000]]]],['year'=>1855]]],'attributes'=>['year','pressrun','mistakes'],'include'=>[['model'=>Enjoin::get('Shipped'),'where'=>['quantity'=>['gt'=>300]]],['model'=>Enjoin::get('Preorders'),'where'=>['quantity'=>['lt'=>155000]],'required'=>false]]]]]];}
    private function sql_testFindAllEagerNestedDeep(){return "SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at`, `books`.`id` AS `books.id`, `books`.`year` AS `books.year`, `books`.`title` AS `books.title`, `books.reviews`.`id` AS `books.reviews.id`, `books.reviews`.`books_id` AS `books.reviews.books_id`, `books.reviews`.`resource` AS `books.reviews.resource`, `books.reviews`.`content` AS `books.reviews.content`, `books.reviews`.`created_at` AS `books.reviews.created_at`, `books.reviews`.`updated_at` AS `books.reviews.updated_at`, `books.publishers_books`.`id` AS `books.publishers_books.id`, `books.publishers_books`.`year` AS `books.publishers_books.year`, `books.publishers_books`.`pressrun` AS `books.publishers_books.pressrun`, `books.publishers_books`.`mistakes` AS `books.publishers_books.mistakes`, `books.publishers_books.shippeds`.`id` AS `books.publishers_books.shippeds.id`, `books.publishers_books.shippeds`.`publishers_books_id` AS `books.publishers_books.shippeds.publishers_books_id`, `books.publishers_books.shippeds`.`destination` AS `books.publishers_books.shippeds.destination`, `books.publishers_books.shippeds`.`quantity` AS `books.publishers_books.shippeds.quantity`, `books.publishers_books.shippeds`.`sent_at` AS `books.publishers_books.shippeds.sent_at`, `books.publishers_books.shippeds`.`created_at` AS `books.publishers_books.shippeds.created_at`, `books.publishers_books.shippeds`.`updated_at` AS `books.publishers_books.shippeds.updated_at`, `books.publishers_books.preorders`.`id` AS `books.publishers_books.preorders.id`, `books.publishers_books.preorders`.`publishers_books_id` AS `books.publishers_books.preorders.publishers_books_id`, `books.publishers_books.preorders`.`person` AS `books.publishers_books.preorders.person`, `books.publishers_books.preorders`.`quantity` AS `books.publishers_books.preorders.quantity`, `books.publishers_books.preorders`.`created_at` AS `books.publishers_books.preorders.created_at`, `books.publishers_books.preorders`.`updated_at` AS `books.publishers_books.preorders.updated_at` FROM `authors` AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` AND `books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930) LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` AND ((`books.publishers_books`.`mistakes` != '' AND `books.publishers_books`.`pressrun` >= 5000) OR `books.publishers_books`.`year` = 1855) INNER JOIN `shipped` AS `books.publishers_books.shippeds` ON `books.publishers_books`.`id` = `books.publishers_books.shippeds`.`publishers_books_id` AND `books.publishers_books.shippeds`.`quantity` > 300 LEFT OUTER JOIN `preorders` AS `books.publishers_books.preorders` ON `books.publishers_books`.`id` = `books.publishers_books.preorders`.`publishers_books_id` AND `books.publishers_books.preorders`.`quantity` < 155000 WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice')";}
    private function params_testFindAllEagerNestedDeepLimited(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'where'=>['title'=>['notLike'=>'sad'],'or'=>[['year'=>['lt'=>1920]],['year'=>['gt'=>1930]]]],'attributes'=>['year','title'],'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'where'=>['or'=>[['and'=>[['mistakes'=>['ne'=>'']],['pressrun'=>['gte'=>5000]]]],['year'=>1855]]],'attributes'=>['year','pressrun','mistakes'],'include'=>[['model'=>Enjoin::get('Shipped'),'where'=>['quantity'=>['gt'=>300]]],['model'=>Enjoin::get('Preorders'),'where'=>['quantity'=>['lt'=>155000]],'required'=>false]]]]],'offset'=>0,'limit'=>50];}
    private function sql_testFindAllEagerNestedDeepLimited(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`year` AS `books.year`, `books`.`title` AS `books.title`, `books.reviews`.`id` AS `books.reviews.id`, `books.reviews`.`books_id` AS `books.reviews.books_id`, `books.reviews`.`resource` AS `books.reviews.resource`, `books.reviews`.`content` AS `books.reviews.content`, `books.reviews`.`created_at` AS `books.reviews.created_at`, `books.reviews`.`updated_at` AS `books.reviews.updated_at`, `books.publishers_books`.`id` AS `books.publishers_books.id`, `books.publishers_books`.`year` AS `books.publishers_books.year`, `books.publishers_books`.`pressrun` AS `books.publishers_books.pressrun`, `books.publishers_books`.`mistakes` AS `books.publishers_books.mistakes`, `books.publishers_books.shippeds`.`id` AS `books.publishers_books.shippeds.id`, `books.publishers_books.shippeds`.`publishers_books_id` AS `books.publishers_books.shippeds.publishers_books_id`, `books.publishers_books.shippeds`.`destination` AS `books.publishers_books.shippeds.destination`, `books.publishers_books.shippeds`.`quantity` AS `books.publishers_books.shippeds.quantity`, `books.publishers_books.shippeds`.`sent_at` AS `books.publishers_books.shippeds.sent_at`, `books.publishers_books.shippeds`.`created_at` AS `books.publishers_books.shippeds.created_at`, `books.publishers_books.shippeds`.`updated_at` AS `books.publishers_books.shippeds.updated_at`, `books.publishers_books.preorders`.`id` AS `books.publishers_books.preorders.id`, `books.publishers_books.preorders`.`publishers_books_id` AS `books.publishers_books.preorders.publishers_books_id`, `books.publishers_books.preorders`.`person` AS `books.publishers_books.preorders.person`, `books.publishers_books.preorders`.`quantity` AS `books.publishers_books.preorders.quantity`, `books.publishers_books.preorders`.`created_at` AS `books.publishers_books.preorders.created_at`, `books.publishers_books.preorders`.`updated_at` AS `books.publishers_books.preorders.updated_at` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice') AND ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id` AND (`books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930))) LIMIT 1 ) IS NOT NULL LIMIT 0, 50) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` AND `books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930) LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` AND ((`books.publishers_books`.`mistakes` != '' AND `books.publishers_books`.`pressrun` >= 5000) OR `books.publishers_books`.`year` = 1855) INNER JOIN `shipped` AS `books.publishers_books.shippeds` ON `books.publishers_books`.`id` = `books.publishers_books.shippeds`.`publishers_books_id` AND `books.publishers_books.shippeds`.`quantity` > 300 LEFT OUTER JOIN `preorders` AS `books.publishers_books.preorders` ON `books.publishers_books`.`id` = `books.publishers_books.preorders`.`publishers_books_id` AND `books.publishers_books.preorders`.`quantity` < 155000";}
    private function params_testFindAllEagerOneThenMany(){return ['include'=>['model'=>Enjoin::get('Authors'),'include'=>Enjoin::get('Articles')]];}
    private function sql_testFindAllEagerOneThenMany(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at`, `author.articles`.`id` AS `author.articles.id`, `author.articles`.`authors_id` AS `author.articles.authors_id`, `author.articles`.`year` AS `author.articles.year`, `author.articles`.`title` AS `author.articles.title`, `author.articles`.`content` AS `author.articles.content`, `author.articles`.`created_at` AS `author.articles.created_at`, `author.articles`.`updated_at` AS `author.articles.updated_at` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` LEFT OUTER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id`";}
    private function params_testFindAllEagerOneThenManyMean(){return ['where'=>['id'=>['lt'=>5]],'include'=>['model'=>Enjoin::get('Authors'),'where'=>['id'=>['like'=>'2%']],'include'=>['model'=>Enjoin::get('Articles'),'where'=>['year'=>['like'=>'19%']]]]];}
    private function sql_testFindAllEagerOneThenManyMean(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at`, `author.articles`.`id` AS `author.articles.id`, `author.articles`.`authors_id` AS `author.articles.authors_id`, `author.articles`.`year` AS `author.articles.year`, `author.articles`.`title` AS `author.articles.title`, `author.articles`.`content` AS `author.articles.content`, `author.articles`.`created_at` AS `author.articles.created_at`, `author.articles`.`updated_at` AS `author.articles.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` AND `author`.`id` LIKE '2%' INNER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id` AND `author.articles`.`year` LIKE '19%' WHERE `books`.`id` < 5";}
    private function params_testFindAllEagerOneThenManyMeanGrouped(){return ['where'=>['id'=>['lt'=>5]],'include'=>['model'=>Enjoin::get('Authors'),'where'=>['id'=>['like'=>'2%']],'include'=>['model'=>Enjoin::get('Articles'),'where'=>['year'=>['like'=>'19%']]]],'group'=>['year',[Enjoin::get('Authors'),Enjoin::get('Articles'),'year']]];}
    private function sql_testFindAllEagerOneThenManyMeanGrouped(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at`, `author.articles`.`id` AS `author.articles.id`, `author.articles`.`authors_id` AS `author.articles.authors_id`, `author.articles`.`year` AS `author.articles.year`, `author.articles`.`title` AS `author.articles.title`, `author.articles`.`content` AS `author.articles.content`, `author.articles`.`created_at` AS `author.articles.created_at`, `author.articles`.`updated_at` AS `author.articles.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` AND `author`.`id` LIKE '2%' INNER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id` AND `author.articles`.`year` LIKE '19%' WHERE `books`.`id` < 5 GROUP BY `year`, `author.articles`.`year`";}
    private function params_testFindAllEagerOneThenManyMeanOrdered(){return ['where'=>['id'=>['lt'=>5]],'include'=>['model'=>Enjoin::get('Authors'),'where'=>['id'=>['like'=>'2%']],'include'=>['model'=>Enjoin::get('Articles'),'where'=>['year'=>['like'=>'19%']]]],'order'=>['year',[Enjoin::get('Authors'),Enjoin::get('Articles'),'year','DESC']]];}
    private function sql_testFindAllEagerOneThenManyMeanOrdered(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at`, `author.articles`.`id` AS `author.articles.id`, `author.articles`.`authors_id` AS `author.articles.authors_id`, `author.articles`.`year` AS `author.articles.year`, `author.articles`.`title` AS `author.articles.title`, `author.articles`.`content` AS `author.articles.content`, `author.articles`.`created_at` AS `author.articles.created_at`, `author.articles`.`updated_at` AS `author.articles.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` AND `author`.`id` LIKE '2%' INNER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id` AND `author.articles`.`year` LIKE '19%' WHERE `books`.`id` < 5 ORDER BY `year`, `author.articles`.`year` DESC";}
    private function params_testFindAllEmptyList(){return ['where'=>['id'=>[],'title'=>['like'=>'%cloud%'],'year'=>['ne'=>null]]];}
    private function sql_testFindAllEmptyList(){return "SELECT `id`, `authors_id`, `languages_id`, `title`, `year`, `created_at`, `updated_at` FROM `books` AS `books` WHERE `books`.`id` IN (NULL) AND `books`.`title` LIKE '%cloud%' AND `books`.`year` IS NOT NULL";}
    private function params_testFindAndCountAllConditional(){return ['where'=>['id'=>['lt'=>5],'title'=>['like'=>'My%']]];}
    private function sql_testFindAndCountAllConditional(){return "SELECT count(*) AS `count` FROM `books` AS `books` WHERE `books`.`id` < 5 AND `books`.`title` LIKE 'My%'";}
    private function params_testFindAndCountAllEagerOneThenMany(){return ['include'=>['model'=>Enjoin::get('Authors'),'include'=>Enjoin::get('Articles')]];}
    private function sql_testFindAndCountAllEagerOneThenMany(){return "SELECT count(`books`.`id`) AS `count` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` LEFT OUTER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id`";}
    private function params_testFindAndCountAllEagerOneThenManyMean(){return ['where'=>['id'=>['lt'=>5]],'include'=>['model'=>Enjoin::get('Authors'),'where'=>['id'=>['like'=>'2%']],'include'=>['model'=>Enjoin::get('Articles'),'where'=>['year'=>['like'=>'19%']]]]];}
    private function sql_testFindAndCountAllEagerOneThenManyMean(){return "SELECT count(`books`.`id`) AS `count` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` AND `author`.`id` LIKE '2%' INNER JOIN `articles` AS `author.articles` ON `author`.`id` = `author.articles`.`authors_id` AND `author.articles`.`year` LIKE '19%' WHERE `books`.`id` < 5";}
    private function params_testFindAndCountAllEagerRequired(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'required'=>true]]]];}
    private function sql_testFindAndCountAllEagerRequired(){return "SELECT count(`authors`.`id`) AS `count` FROM `authors` AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice')";}
    private function params_testFindAndCountAllEagerRequiredLimited(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'required'=>true]]],'limit'=>25,'offset'=>7];}
    private function sql_testFindAndCountAllEagerRequiredLimited(){return "SELECT count(`authors`.`id`) AS `count` FROM `authors` AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice')";}
    private function params_testFindOneAndOr(){return ['where'=>['or'=>[['and'=>[['id'=>1],['name'=>['ne'=>null]],['or'=>[['id'=>4],['id'=>5]]]]],['or'=>[['and'=>[['name'=>['like'=>'Stephen']],['id'=>[22,33]]]],['and'=>[['id'=>['notIn'=>[1,2,3]]],['name'=>['notLike'=>'Tolkien']]]]]]]]];}
    private function sql_testFindOneAndOr(){return "SELECT `id`, `name`, `created_at`, `updated_at` FROM `authors` AS `authors` WHERE ((`authors`.`id` = 1 AND `authors`.`name` IS NOT NULL AND (`authors`.`id` = 4 OR `authors`.`id` = 5)) OR ((`authors`.`name` LIKE 'Stephen' AND `authors`.`id` IN (22, 33)) OR (`authors`.`id` NOT IN (1, 2, 3) AND `authors`.`name` NOT LIKE 'Tolkien'))) LIMIT 1";}
    private function params_testFindOneComplex(){return ['where'=>['id'=>['in'=>[1,2,3],'gte'=>2,'lt'=>10],'name'=>['notIn'=>['Alice','Bob'],'ne'=>null]]];}
    private function sql_testFindOneComplex(){return "SELECT `id`, `name`, `created_at`, `updated_at` FROM `authors` AS `authors` WHERE (`authors`.`id` IN (1, 2, 3) AND `authors`.`id` >= 2 AND `authors`.`id` < 10) AND (`authors`.`name` NOT IN ('Alice', 'Bob') AND `authors`.`name` IS NOT NULL) LIMIT 1";}
    private function params_testFindOneEager(){return ['include'=>Enjoin::get('Books')];}
    private function sql_testFindOneEager(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` LIMIT 1) AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id`";}
    private function params_testFindOneEagerById(){return ['where'=>['id'=>1],'include'=>Enjoin::get('Books')];}
    private function sql_testFindOneEagerById(){return "SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at`, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM `authors` AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` WHERE `authors`.`id` = 1";}
    private function params_testFindOneEagerByIdMean(){return ['where'=>['id'=>1,'name'=>['Alice','Bob']],'include'=>Enjoin::get('Books')];}
    private function sql_testFindOneEagerByIdMean(){return "SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at`, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM `authors` AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` WHERE `authors`.`id` = 1 AND `authors`.`name` IN ('Alice', 'Bob')";}
    private function params_testFindOneEagerByIdRequired(){return ['where'=>['id'=>1],'include'=>['model'=>Enjoin::get('Books'),'required'=>true]];}
    private function sql_testFindOneEagerByIdRequired(){return "SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at`, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM `authors` AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` WHERE `authors`.`id` = 1";}
    private function params_testFindOneEagerMean(){return ['where'=>['id'=>[1,2,3],'name'=>['Alice','Bob']],'include'=>Enjoin::get('Books')];}
    private function sql_testFindOneEagerMean(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE `authors`.`id` IN (1, 2, 3) AND `authors`.`name` IN ('Alice', 'Bob') LIMIT 1) AS `authors` LEFT OUTER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id`";}
    private function params_testFindOneEagerMeanRequired(){return ['where'=>['id'=>[1,2,3],'name'=>['Alice','Bob']],'include'=>['model'=>Enjoin::get('Books'),'required'=>true]];}
    private function sql_testFindOneEagerMeanRequired(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE `authors`.`id` IN (1, 2, 3) AND `authors`.`name` IN ('Alice', 'Bob') AND ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id`";}
    private function params_testFindOneEagerMulti(){return ['include'=>[Enjoin::get('Authors'),Enjoin::get('Reviews'),Enjoin::get('PublishersBooks')]];}
    private function sql_testFindOneEagerMulti(){return "SELECT `books`.*, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at`, `reviews`.`id` AS `reviews.id`, `reviews`.`books_id` AS `reviews.books_id`, `reviews`.`resource` AS `reviews.resource`, `reviews`.`content` AS `reviews.content`, `reviews`.`created_at` AS `reviews.created_at`, `reviews`.`updated_at` AS `reviews.updated_at`, `publishers_books`.`id` AS `publishers_books.id`, `publishers_books`.`publishers_id` AS `publishers_books.publishers_id`, `publishers_books`.`books_id` AS `publishers_books.books_id`, `publishers_books`.`year` AS `publishers_books.year`, `publishers_books`.`pressrun` AS `publishers_books.pressrun`, `publishers_books`.`mistakes` AS `publishers_books.mistakes` FROM (SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at` FROM `books` AS `books` LIMIT 1) AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` LEFT OUTER JOIN `reviews` AS `reviews` ON `books`.`id` = `reviews`.`books_id` LEFT OUTER JOIN `publishers_books` AS `publishers_books` ON `books`.`id` = `publishers_books`.`books_id`";}
    private function params_testFindOneEagerMultiRequired(){return ['include'=>[['model'=>Enjoin::get('Authors'),'required'=>true],['model'=>Enjoin::get('Reviews'),'required'=>true],Enjoin::get('PublishersBooks')]];}
    private function sql_testFindOneEagerMultiRequired(){return "SELECT `books`.*, `reviews`.`id` AS `reviews.id`, `reviews`.`books_id` AS `reviews.books_id`, `reviews`.`resource` AS `reviews.resource`, `reviews`.`content` AS `reviews.content`, `reviews`.`created_at` AS `reviews.created_at`, `reviews`.`updated_at` AS `reviews.updated_at`, `publishers_books`.`id` AS `publishers_books.id`, `publishers_books`.`publishers_id` AS `publishers_books.publishers_id`, `publishers_books`.`books_id` AS `publishers_books.books_id`, `publishers_books`.`year` AS `publishers_books.year`, `publishers_books`.`pressrun` AS `publishers_books.pressrun`, `publishers_books`.`mistakes` AS `publishers_books.mistakes` FROM (SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` WHERE ( SELECT `books_id` FROM `reviews` AS `reviews` WHERE (`reviews`.`books_id` = `books`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `books` INNER JOIN `reviews` AS `reviews` ON `books`.`id` = `reviews`.`books_id` LEFT OUTER JOIN `publishers_books` AS `publishers_books` ON `books`.`id` = `publishers_books`.`books_id`";}
    private function params_testFindOneEagerMultiWhere(){return ['include'=>[['model'=>Enjoin::get('Authors'),'where'=>['name'=>['like'=>'%tol%']]],['model'=>Enjoin::get('Reviews'),'where'=>['resource'=>['notLike'=>'wiki']]],['model'=>Enjoin::get('PublishersBooks'),'where'=>['pressrun'=>['gt'=>10000]]]]];}
    private function sql_testFindOneEagerMultiWhere(){return "SELECT `books`.*, `reviews`.`id` AS `reviews.id`, `reviews`.`books_id` AS `reviews.books_id`, `reviews`.`resource` AS `reviews.resource`, `reviews`.`content` AS `reviews.content`, `reviews`.`created_at` AS `reviews.created_at`, `reviews`.`updated_at` AS `reviews.updated_at`, `publishers_books`.`id` AS `publishers_books.id`, `publishers_books`.`publishers_id` AS `publishers_books.publishers_id`, `publishers_books`.`books_id` AS `publishers_books.books_id`, `publishers_books`.`year` AS `publishers_books.year`, `publishers_books`.`pressrun` AS `publishers_books.pressrun`, `publishers_books`.`mistakes` AS `publishers_books.mistakes` FROM (SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` AND `author`.`name` LIKE '%tol%' WHERE ( SELECT `books_id` FROM `reviews` AS `reviews` WHERE (`reviews`.`books_id` = `books`.`id` AND `reviews`.`resource` NOT LIKE 'wiki') LIMIT 1 ) IS NOT NULL AND ( SELECT `books_id` FROM `publishers_books` AS `publishers_books` WHERE (`publishers_books`.`books_id` = `books`.`id` AND `publishers_books`.`pressrun` > 10000) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `books` INNER JOIN `reviews` AS `reviews` ON `books`.`id` = `reviews`.`books_id` AND `reviews`.`resource` NOT LIKE 'wiki' INNER JOIN `publishers_books` AS `publishers_books` ON `books`.`id` = `publishers_books`.`books_id` AND `publishers_books`.`pressrun` > 10000";}
    private function params_testFindOneEagerNested(){return ['include'=>['model'=>Enjoin::get('Books'),'where'=>['title'=>['notLike'=>'sad'],'or'=>[['year'=>['lt'=>1920]],['year'=>['gt'=>1930]]]],'attributes'=>['year','title'],'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'where'=>['or'=>[['and'=>[['mistakes'=>['ne'=>'']],['pressrun'=>['gte'=>5000]]]],['year'=>1855]]],'attributes'=>['year','pressrun','mistakes']]]]];}
    private function sql_testFindOneEagerNested(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`year` AS `books.year`, `books`.`title` AS `books.title`, `books.reviews`.`id` AS `books.reviews.id`, `books.reviews`.`books_id` AS `books.reviews.books_id`, `books.reviews`.`resource` AS `books.reviews.resource`, `books.reviews`.`content` AS `books.reviews.content`, `books.reviews`.`created_at` AS `books.reviews.created_at`, `books.reviews`.`updated_at` AS `books.reviews.updated_at`, `books.publishers_books`.`id` AS `books.publishers_books.id`, `books.publishers_books`.`year` AS `books.publishers_books.year`, `books.publishers_books`.`pressrun` AS `books.publishers_books.pressrun`, `books.publishers_books`.`mistakes` AS `books.publishers_books.mistakes` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id` AND (`books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930))) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` AND `books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930) LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` AND ((`books.publishers_books`.`mistakes` != '' AND `books.publishers_books`.`pressrun` >= 5000) OR `books.publishers_books`.`year` = 1855)";}
    private function params_testFindOneEagerNestedById(){return ['where'=>['id'=>['in'=>[1,2,3],'gte'=>2,'lt'=>10]],'include'=>['model'=>Enjoin::get('Books'),'where'=>['title'=>['notLike'=>'sad'],'or'=>[['year'=>['lt'=>1920]],['year'=>['gt'=>1930]]]],'attributes'=>['year','title'],'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'where'=>['or'=>[['and'=>[['mistakes'=>['ne'=>'']],['pressrun'=>['gte'=>5000]]]],['year'=>1855]]],'attributes'=>['year','pressrun','mistakes']]]]];}
    private function sql_testFindOneEagerNestedById(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`year` AS `books.year`, `books`.`title` AS `books.title`, `books.reviews`.`id` AS `books.reviews.id`, `books.reviews`.`books_id` AS `books.reviews.books_id`, `books.reviews`.`resource` AS `books.reviews.resource`, `books.reviews`.`content` AS `books.reviews.content`, `books.reviews`.`created_at` AS `books.reviews.created_at`, `books.reviews`.`updated_at` AS `books.reviews.updated_at`, `books.publishers_books`.`id` AS `books.publishers_books.id`, `books.publishers_books`.`year` AS `books.publishers_books.year`, `books.publishers_books`.`pressrun` AS `books.publishers_books.pressrun`, `books.publishers_books`.`mistakes` AS `books.publishers_books.mistakes` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE (`authors`.`id` IN (1, 2, 3) AND `authors`.`id` >= 2 AND `authors`.`id` < 10) AND ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id` AND (`books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930))) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` AND `books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930) LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` AND ((`books.publishers_books`.`mistakes` != '' AND `books.publishers_books`.`pressrun` >= 5000) OR `books.publishers_books`.`year` = 1855)";}
    private function params_testFindOneEagerNestedDeep(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'where'=>['title'=>['notLike'=>'sad'],'or'=>[['year'=>['lt'=>1920]],['year'=>['gt'=>1930]]]],'attributes'=>['year','title'],'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'where'=>['or'=>[['and'=>[['mistakes'=>['ne'=>'']],['pressrun'=>['gte'=>5000]]]],['year'=>1855]]],'attributes'=>['year','pressrun','mistakes'],'include'=>[['model'=>Enjoin::get('Shipped'),'where'=>['quantity'=>['gt'=>300]]],['model'=>Enjoin::get('Preorders'),'where'=>['quantity'=>['lt'=>155000]],'required'=>false]]]]]];}
    private function sql_testFindOneEagerNestedDeep(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`year` AS `books.year`, `books`.`title` AS `books.title`, `books.reviews`.`id` AS `books.reviews.id`, `books.reviews`.`books_id` AS `books.reviews.books_id`, `books.reviews`.`resource` AS `books.reviews.resource`, `books.reviews`.`content` AS `books.reviews.content`, `books.reviews`.`created_at` AS `books.reviews.created_at`, `books.reviews`.`updated_at` AS `books.reviews.updated_at`, `books.publishers_books`.`id` AS `books.publishers_books.id`, `books.publishers_books`.`year` AS `books.publishers_books.year`, `books.publishers_books`.`pressrun` AS `books.publishers_books.pressrun`, `books.publishers_books`.`mistakes` AS `books.publishers_books.mistakes`, `books.publishers_books.shippeds`.`id` AS `books.publishers_books.shippeds.id`, `books.publishers_books.shippeds`.`publishers_books_id` AS `books.publishers_books.shippeds.publishers_books_id`, `books.publishers_books.shippeds`.`destination` AS `books.publishers_books.shippeds.destination`, `books.publishers_books.shippeds`.`quantity` AS `books.publishers_books.shippeds.quantity`, `books.publishers_books.shippeds`.`sent_at` AS `books.publishers_books.shippeds.sent_at`, `books.publishers_books.shippeds`.`created_at` AS `books.publishers_books.shippeds.created_at`, `books.publishers_books.shippeds`.`updated_at` AS `books.publishers_books.shippeds.updated_at`, `books.publishers_books.preorders`.`id` AS `books.publishers_books.preorders.id`, `books.publishers_books.preorders`.`publishers_books_id` AS `books.publishers_books.preorders.publishers_books_id`, `books.publishers_books.preorders`.`person` AS `books.publishers_books.preorders.person`, `books.publishers_books.preorders`.`quantity` AS `books.publishers_books.preorders.quantity`, `books.publishers_books.preorders`.`created_at` AS `books.publishers_books.preorders.created_at`, `books.publishers_books.preorders`.`updated_at` AS `books.publishers_books.preorders.updated_at` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice') AND ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id` AND (`books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930))) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` AND `books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930) LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` AND ((`books.publishers_books`.`mistakes` != '' AND `books.publishers_books`.`pressrun` >= 5000) OR `books.publishers_books`.`year` = 1855) INNER JOIN `shipped` AS `books.publishers_books.shippeds` ON `books.publishers_books`.`id` = `books.publishers_books.shippeds`.`publishers_books_id` AND `books.publishers_books.shippeds`.`quantity` > 300 LEFT OUTER JOIN `preorders` AS `books.publishers_books.preorders` ON `books.publishers_books`.`id` = `books.publishers_books.preorders`.`publishers_books_id` AND `books.publishers_books.preorders`.`quantity` < 155000";}
    private function params_testFindOneEagerNestedMean(){return ['where'=>['id'=>['gte'=>0,'lt'=>10],'name'=>['or'=>[['ne'=>'Bob'],['ne'=>'Alice']]]],'include'=>['model'=>Enjoin::get('Books'),'where'=>['title'=>['notLike'=>'sad'],'or'=>[['year'=>['lt'=>1920]],['year'=>['gt'=>1930]]]],'attributes'=>['year','title'],'include'=>[Enjoin::get('Reviews'),['model'=>Enjoin::get('PublishersBooks'),'where'=>['or'=>[['and'=>[['mistakes'=>['ne'=>'']],['pressrun'=>['gte'=>5000]]]],['year'=>1855]]],'attributes'=>['year','pressrun','mistakes']]]]];}
    private function sql_testFindOneEagerNestedMean(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`year` AS `books.year`, `books`.`title` AS `books.title`, `books.reviews`.`id` AS `books.reviews.id`, `books.reviews`.`books_id` AS `books.reviews.books_id`, `books.reviews`.`resource` AS `books.reviews.resource`, `books.reviews`.`content` AS `books.reviews.content`, `books.reviews`.`created_at` AS `books.reviews.created_at`, `books.reviews`.`updated_at` AS `books.reviews.updated_at`, `books.publishers_books`.`id` AS `books.publishers_books.id`, `books.publishers_books`.`year` AS `books.publishers_books.year`, `books.publishers_books`.`pressrun` AS `books.publishers_books.pressrun`, `books.publishers_books`.`mistakes` AS `books.publishers_books.mistakes` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE (`authors`.`id` >= 0 AND `authors`.`id` < 10) AND (`authors`.`name` != 'Bob' OR `authors`.`name` != 'Alice') AND ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id` AND (`books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930))) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id` AND `books`.`title` NOT LIKE 'sad' AND (`books`.`year` < 1920 OR `books`.`year` > 1930) LEFT OUTER JOIN `reviews` AS `books.reviews` ON `books`.`id` = `books.reviews`.`books_id` INNER JOIN `publishers_books` AS `books.publishers_books` ON `books`.`id` = `books.publishers_books`.`books_id` AND ((`books.publishers_books`.`mistakes` != '' AND `books.publishers_books`.`pressrun` >= 5000) OR `books.publishers_books`.`year` = 1855)";}
    private function params_testFindOneEagerRequired(){return ['include'=>['model'=>Enjoin::get('Books'),'required'=>true]];}
    private function sql_testFindOneEagerRequired(){return "SELECT `authors`.*, `books`.`id` AS `books.id`, `books`.`authors_id` AS `books.authors_id`, `books`.`languages_id` AS `books.languages_id`, `books`.`title` AS `books.title`, `books`.`year` AS `books.year`, `books`.`created_at` AS `books.created_at`, `books`.`updated_at` AS `books.updated_at` FROM (SELECT `authors`.`id`, `authors`.`name`, `authors`.`created_at`, `authors`.`updated_at` FROM `authors` AS `authors` WHERE ( SELECT `authors_id` FROM `books` AS `books` WHERE (`books`.`authors_id` = `authors`.`id`) LIMIT 1 ) IS NOT NULL LIMIT 1) AS `authors` INNER JOIN `books` AS `books` ON `authors`.`id` = `books`.`authors_id`";}
    private function params_testFindOneEagerReversed(){return ['include'=>Enjoin::get('Authors')];}
    private function sql_testFindOneEagerReversed(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` LIMIT 1";}
    private function params_testFindOneEagerReversedById(){return ['where'=>['id'=>1],'include'=>Enjoin::get('Authors')];}
    private function sql_testFindOneEagerReversedById(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` WHERE `books`.`id` = 1";}
    private function params_testFindOneEagerReversedByIdMean(){return ['where'=>['id'=>[1,2,3],'title'=>['Alice','Bob']],'include'=>Enjoin::get('Authors')];}
    private function sql_testFindOneEagerReversedByIdMean(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` WHERE `books`.`id` IN (1, 2, 3) AND `books`.`title` IN ('Alice', 'Bob') LIMIT 1";}
    private function params_testFindOneEagerReversedByIdRequired(){return ['where'=>['id'=>1],'include'=>['model'=>Enjoin::get('Authors'),'required'=>true]];}
    private function sql_testFindOneEagerReversedByIdRequired(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` WHERE `books`.`id` = 1";}
    private function params_testFindOneEagerReversedMean(){return ['where'=>['id'=>['in'=>[1,2,3],'gte'=>2,'lt'=>10],'title'=>['Alice','Bob']],'include'=>Enjoin::get('Authors')];}
    private function sql_testFindOneEagerReversedMean(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` LEFT OUTER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` WHERE (`books`.`id` IN (1, 2, 3) AND `books`.`id` >= 2 AND `books`.`id` < 10) AND `books`.`title` IN ('Alice', 'Bob') LIMIT 1";}
    private function params_testFindOneEagerReversedMeanRequired(){return ['where'=>['id'=>['in'=>[1,2,3],'gte'=>2,'lt'=>10],'title'=>['Alice','Bob']],'include'=>['model'=>Enjoin::get('Authors'),'required'=>true]];}
    private function sql_testFindOneEagerReversedMeanRequired(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` WHERE (`books`.`id` IN (1, 2, 3) AND `books`.`id` >= 2 AND `books`.`id` < 10) AND `books`.`title` IN ('Alice', 'Bob') LIMIT 1";}
    private function params_testFindOneEagerReversedRequired(){return ['include'=>['model'=>Enjoin::get('Authors'),'required'=>true]];}
    private function sql_testFindOneEagerReversedRequired(){return "SELECT `books`.`id`, `books`.`authors_id`, `books`.`languages_id`, `books`.`title`, `books`.`year`, `books`.`created_at`, `books`.`updated_at`, `author`.`id` AS `author.id`, `author`.`name` AS `author.name`, `author`.`created_at` AS `author.created_at`, `author`.`updated_at` AS `author.updated_at` FROM `books` AS `books` INNER JOIN `authors` AS `author` ON `books`.`authors_id` = `author`.`id` LIMIT 1";}
    private function params_testFindOneEagerSelfNestedNoSubQuery(){return ['where'=>['year'=>['notIn'=>[1900,1950,2000]],'or'=>[['and'=>[['id'=>['lte'=>5000]],['year'=>['gte'=>500]]]],['and'=>[['id'=>null],['year'=>null]]]]],'subQuery'=>false,'attributes'=>['id'],'include'=>['model'=>Enjoin::get('PublishersBooks'),'where'=>['books_id'=>77],'attributes'=>['id'],'include'=>['model'=>Enjoin::get('Publishers'),'where'=>['pid'=>99],'attributes'=>['id'],'include'=>['model'=>Enjoin::get('Publishers'),'as'=>'parent','where'=>['pid'=>505],'attributes'=>['id'],'include'=>['model'=>Enjoin::get('Publishers'),'as'=>'parent','where'=>['pid'=>3443],'attributes'=>['id']]]]]];}
    private function sql_testFindOneEagerSelfNestedNoSubQuery(){return "SELECT `books`.`id`, `publishers_books`.`id` AS `publishers_books.id`, `publishers_books.publisher`.`id` AS `publishers_books.publisher.id`, `publishers_books.publisher.parent`.`id` AS `publishers_books.publisher.parent.id`, `publishers_books.publisher.parent.parent`.`id` AS `publishers_books.publisher.parent.parent.id` FROM `books` AS `books` INNER JOIN `publishers_books` AS `publishers_books` ON `books`.`id` = `publishers_books`.`books_id` AND `publishers_books`.`books_id` = 77 INNER JOIN `publishers` AS `publishers_books.publisher` ON `publishers_books`.`publishers_id` = `publishers_books.publisher`.`id` AND `publishers_books.publisher`.`pid` = 99 INNER JOIN `publishers` AS `publishers_books.publisher.parent` ON `publishers_books.publisher`.`pid` = `publishers_books.publisher.parent`.`id` AND `publishers_books.publisher.parent`.`pid` = 505 INNER JOIN `publishers` AS `publishers_books.publisher.parent.parent` ON `publishers_books.publisher.parent`.`pid` = `publishers_books.publisher.parent.parent`.`id` AND `publishers_books.publisher.parent.parent`.`pid` = 3443 WHERE `books`.`year` NOT IN (1900, 1950, 2000) AND ((`books`.`id` <= 5000 AND `books`.`year` >= 500) OR (`books`.`id` IS NULL AND `books`.`year` IS NULL)) LIMIT 1";}
    private function params_testModelUpdate(){return ['where'=>['id'=>200]];}
    private function collection_testModelUpdate(){return ['name'=>'Korean'];}
    private function sql_testModelUpdate(){return "UPDATE `languages` SET `name`='Korean' WHERE `id` = 200";}
}
